# Contributing to the `credential-manager` project

The `credential-manager` development is primarily with Haskell tools and Nix.

These can be provisioned with:

```bash
nix develop .
```

Which uses Nix Flakes to enter a development environment with all necessary
tools installed.

## Roles and Responsibilities
We maintain a [CODEOWNERS file](CODEOWNERS) which provides information who
should review a contributing PR.  Note that you might need to get approvals
from all code owners (even though GitHub doesn't give a way to enforce it).

## Updating dependencies

### From Hackage
Updating package dependencies from Hackage should work like normal in a Haskell project.
The most important thing to note is that we pin the `index-state` of the Hackage package index in `cabal.project`.
This means that cabal will always see Hackage “as if” it was that time, ensuring reproducibility.
But it also means that if you need a package version that was released *after* that time, you need to bump the `index-state` (and to run `cabal update` locally).

Because of how we use Nix to manage our Haskell build, whenever you do this you will also need to pull in the Nix equivalent of the newer `index-state`.
You can do this by running `nix flake lock --update-input iogx`.

### from the Cardano package repository
Many Cardano packages are not on Hackage and are instead in the [Cardano Haskell Package (CHaP) repository][CHaP].

Getting new packages from there works much like getting them from Hackage.

The differences are that it has an independent `index-state` in `cabal.project`.
Afterwards you also need to run `nix flake lock --update-input iogx`.

## Using unreleased versions of dependencies
Sometimes we need to use an unreleased version of one of our dependencies, either to fix an issue in a package that is not under our control, or to experiment with a pre-release version of one of our own packages.
You can use a `source-repository-package` stanza to pull in the unreleased version.

Try only to do this for a short time, as it does not play very well with tooling, and will interfere with the ability to release the `cardano-cli` itself. If you do add a temporary `source-repository-package` stanza, you need to
provide a [`--sha256` comment in `cabal.project`](https://input-output-hk.github.io/haskell.nix/tutorials/source-repository-hashes.html#cabalproject).

For packages that we do not control, we can end up in a situation where we have a fork that looks like it will be long-lived or permanent (e.g. the maintainer is unresponsive, or the change has been merged but not released).
In that case, release a patched version to the [CHaP repository][CHaP], which allows us to remove the `source-repository-package` stanza.

## Issues
To report bugs and feature requests, please submit an Issue.

## Pull Requests
Pull requests may be made from a fork non-codeowners.
However, the CODEOWNERS reserve the exclusive right to decide what gets merged.
If you have a feature request, consider submitting an issue first.
